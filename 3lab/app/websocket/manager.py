import json
from typing import Dict, List, Callable
from fastapi import WebSocket, APIRouter
from fastapi.websockets import WebSocketDisconnect

websocket_router = APIRouter()


class WebSocketManager:
    def __init__(self):
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ task_id
        self.active_connections: Dict[str, List[WebSocket]] = {}
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ user_id
        self.user_connections: Dict[str, List[WebSocket]] = {}
    
    async def connect(self, websocket: WebSocket, task_id: str = None, user_id: str = None):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ WebSocket –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            await websocket.accept()
            print(f"üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è task_id: {task_id}")
            
            if task_id:
                if task_id not in self.active_connections:
                    self.active_connections[task_id] = []
                self.active_connections[task_id].append(websocket)
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º task_manager –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
                from app.services.task_manager import task_manager
                
                # –°–æ–∑–¥–∞–µ–º callback —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ task_id
                def create_callback(t_id: str) -> Callable:
                    async def callback(message: dict):
                        await self._send_to_task_connections(t_id, message)
                    return callback
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ TaskManager
                task_manager.register_websocket_callback(task_id, create_callback(task_id))
                print(f"‚úÖ Callback –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è task_id: {task_id}")
            
            if user_id:
                if user_id not in self.user_connections:
                    self.user_connections[user_id] = []
                self.user_connections[user_id].append(websocket)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket: {e}")
            raise
    
    def disconnect(self, websocket: WebSocket, task_id: str = None, user_id: str = None):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            print(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è task_id: {task_id}")
            
            if task_id and task_id in self.active_connections:
                if websocket in self.active_connections[task_id]:
                    self.active_connections[task_id].remove(websocket)
                if not self.active_connections[task_id]:
                    del self.active_connections[task_id]
                    # –£–¥–∞–ª—è–µ–º callback –∏–∑ TaskManager
                    from app.services.task_manager import task_manager
                    task_manager.unregister_websocket_callback(task_id)
                    print(f"üóëÔ∏è Callback —É–¥–∞–ª–µ–Ω –¥–ª—è task_id: {task_id}")
            
            if user_id and user_id in self.user_connections:
                if websocket in self.user_connections[user_id]:
                    self.user_connections[user_id].remove(websocket)
                if not self.user_connections[user_id]:
                    del self.user_connections[user_id]
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WebSocket: {e}")
    
    async def send_personal_message(self, message: str, websocket: WebSocket):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            await websocket.send_text(message)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _send_to_task_connections(self, task_id: str, message: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        if task_id in self.active_connections:
            message_str = json.dumps(message, ensure_ascii=False)
            disconnected = []
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {task_id}: {message['status']}")
            
            for websocket in self.active_connections[task_id]:
                try:
                    await websocket.send_text(message_str)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ WebSocket: {e}")
                    disconnected.append(websocket)
            
            # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for ws in disconnected:
                if ws in self.active_connections[task_id]:
                    self.active_connections[task_id].remove(ws)
        else:
            print(f"‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è task_id: {task_id}")
    
    async def send_message_to_user(self, user_id: str, message: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_connections:
            message_str = json.dumps(message, ensure_ascii=False)
            disconnected = []
            
            for websocket in self.user_connections[user_id]:
                try:
                    await websocket.send_text(message_str)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
                    disconnected.append(websocket)
            
            # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for ws in disconnected:
                if ws in self.user_connections[user_id]:
                    self.user_connections[user_id].remove(ws)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
websocket_manager = WebSocketManager()


@websocket_router.websocket("/ws/{task_id}")
async def websocket_endpoint(websocket: WebSocket, task_id: str):
    """WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ"""
    try:
        await websocket_manager.connect(websocket, task_id=task_id)
        
        while True:
            # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (keep-alive)
            data = await websocket.receive_text()
            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {task_id}: {data}")
            # –ú–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            await websocket_manager.send_personal_message(f"–ü–æ–ª—É—á–µ–Ω–æ: {data}", websocket)
            
    except WebSocketDisconnect:
        print(f"üîå WebSocket –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {task_id}")
        websocket_manager.disconnect(websocket, task_id=task_id)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket endpoint: {e}")
        websocket_manager.disconnect(websocket, task_id=task_id)


@websocket_router.websocket("/ws/user/{user_id}")
async def user_websocket_endpoint(websocket: WebSocket, user_id: str):
    """WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ –≤—Å–µ–º –µ–≥–æ –∑–∞–¥–∞—á–∞–º"""
    try:
        await websocket_manager.connect(websocket, user_id=user_id)
        
        while True:
            data = await websocket.receive_text()
            await websocket_manager.send_personal_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {data}", websocket)
            
    except WebSocketDisconnect:
        websocket_manager.disconnect(websocket, user_id=user_id)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket user endpoint: {e}")
        websocket_manager.disconnect(websocket, user_id=user_id) 