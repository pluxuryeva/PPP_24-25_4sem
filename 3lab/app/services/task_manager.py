import asyncio
import time
import uuid
from typing import Dict, Optional, Callable
from datetime import datetime
from app.services.bruteforce import BruteforceService
from app.db.database import SessionLocal
from app.cruds import bruteforce as bruteforce_crud
from app.schemas.bruteforce import WebSocketMessage


class TaskManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ Celery"""
    
    def __init__(self):
        self.active_tasks: Dict[str, asyncio.Task] = {}
        self.websocket_callbacks: Dict[str, Callable] = {}
        self.pending_messages: Dict[str, list] = {}  # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á –±–µ–∑ callback
    
    def register_websocket_callback(self, task_id: str, callback: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.websocket_callbacks[task_id] = callback
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if task_id in self.pending_messages:
            asyncio.create_task(self._send_pending_messages(task_id))
    
    async def _send_pending_messages(self, task_id: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if task_id in self.pending_messages:
            for message in self.pending_messages[task_id]:
                await self.send_websocket_message(task_id, message)
            del self.pending_messages[task_id]
    
    def unregister_websocket_callback(self, task_id: str):
        """–£–¥–∞–ª—è–µ—Ç callback –¥–ª—è WebSocket"""
        if task_id in self.websocket_callbacks:
            del self.websocket_callbacks[task_id]
    
    async def send_websocket_message(self, task_id: str, message: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π callback"""
        if task_id in self.websocket_callbacks:
            try:
                await self.websocket_callbacks[task_id](message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            if task_id not in self.pending_messages:
                self.pending_messages[task_id] = []
            self.pending_messages[task_id].append(message)
            print(f"üìß –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è task {task_id}: {message['status']}")
    
    async def start_bruteforce_task(self, task_id: str, hash_type: str, target_hash: str,
                                  charset: str, max_length: int, user_id: str = None) -> str:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞"""
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = SessionLocal()
        try:
            from app.schemas.bruteforce import BruteforceRequest
            request = BruteforceRequest(
                hash_type=hash_type,
                target_hash=target_hash,
                charset=charset,
                max_length=max_length
            )
            bruteforce_crud.create_task(db, task_id, request, user_id)
        finally:
            db.close()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        task = asyncio.create_task(
            self._bruteforce_worker(task_id, hash_type, target_hash, charset, max_length)
        )
        self.active_tasks[task_id] = task
        
        return task_id
    
    async def _bruteforce_worker(self, task_id: str, hash_type: str, target_hash: str,
                               charset: str, max_length: int):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞"""
        start_time = time.time()
        db = SessionLocal()
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ STARTED
            bruteforce_crud.start_task(db, task_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
            start_message = {
                "status": "STARTED",
                "task_id": task_id,
                "hash_type": hash_type,
                "charset_length": len(charset),
                "max_length": max_length
            }
            await self.send_websocket_message(task_id, start_message)
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
            bruteforce_service = BruteforceService(hash_type)
            
            async def progress_callback(progress: int, current_combination: str, combinations_per_second: int):
                """Callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                bruteforce_crud.update_task_progress(
                    db, task_id, progress, current_combination, combinations_per_second
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                progress_message = {
                    "status": "PROGRESS",
                    "task_id": task_id,
                    "progress": progress,
                    "current_combination": current_combination,
                    "combinations_per_second": combinations_per_second
                }
                await self.send_websocket_message(task_id, progress_message)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä—É—Ç—Ñ–æ—Ä—Å (–∞–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è async)
            result = await self._run_bruteforce_async(
                bruteforce_service, target_hash, charset, max_length, progress_callback
            )
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            elapsed_seconds = int(time.time() - start_time)
            hours = elapsed_seconds // 3600
            minutes = (elapsed_seconds % 3600) // 60
            seconds = elapsed_seconds % 60
            elapsed_time = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
            found_password = result if result else "–ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            bruteforce_crud.complete_task(db, task_id, found_password, elapsed_time)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            completion_message = {
                "status": "COMPLETED",
                "task_id": task_id,
                "result": found_password,
                "elapsed_time": elapsed_time
            }
            await self.send_websocket_message(task_id, completion_message)
            
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            error_message = {
                "status": "FAILED",
                "task_id": task_id,
                "result": f"–û—à–∏–±–∫–∞: {str(e)}"
            }
            await self.send_websocket_message(task_id, error_message)
            print(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {task_id}: {e}")
        
        finally:
            db.close()
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if task_id in self.active_tasks:
                del self.active_tasks[task_id]
    
    async def _run_bruteforce_async(self, bruteforce_service, target_hash: str, charset: str, 
                                  max_length: int, progress_callback):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞"""
        start_time = time.time()
        attempts = 0
        total_combinations = sum(len(charset) ** i for i in range(1, max_length + 1))
        
        for combination in bruteforce_service.generate_combinations(charset, max_length):
            attempts += 1
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à —Ç–µ–∫—É—â–µ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            current_hash = bruteforce_service.hash_string(combination)
            
            # –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —á–∞—â–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–∞—Ä–æ–ª–µ–π
            if attempts % 100 == 0:  # –£–º–µ–Ω—å—à–∏–ª —Å 1000 –¥–æ 100
                progress = int((attempts / total_combinations) * 100)
                elapsed = time.time() - start_time
                combinations_per_second = int(attempts / elapsed) if elapsed > 0 else 0
                
                await progress_callback(
                    progress=min(progress, 99),
                    current_combination=combination,
                    combinations_per_second=combinations_per_second
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if current_hash.lower() == target_hash.lower():
                return combination
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 10 –º–∏–Ω—É—Ç)
            if time.time() - start_time > 600:
                break
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–∞–¥–∞—á
            if attempts % 10 == 0:  # –£–º–µ–Ω—å—à–∏–ª —á–∞—Å—Ç–æ—Ç—É –∑–∞–¥–µ—Ä–∂–µ–∫
                await asyncio.sleep(0.001)
        
        return None
    
    def get_active_tasks(self) -> Dict[str, asyncio.Task]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        return self.active_tasks.copy()
    
    def cancel_task(self, task_id: str) -> bool:
        """–û—Ç–º–µ–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É"""
        if task_id in self.active_tasks:
            self.active_tasks[task_id].cancel()
            del self.active_tasks[task_id]
            return True
        return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á
task_manager = TaskManager() 