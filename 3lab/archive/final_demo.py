#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã ‚Ññ3 (–í–∞—Ä–∏–∞–Ω—Ç 5)
"""

import requests
import time

def final_demo():
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    
    print("üéØ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –õ–ê–ë–û–†–ê–¢–û–†–ù–û–ô –†–ê–ë–û–¢–´ ‚Ññ3 ===")
    print("üìã –í–∞—Ä–∏–∞–Ω—Ç 5: –ë—Ä—É—Ç—Ñ–æ—Ä—Å —Å WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
    print("=" * 50)
    
    # 1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n1. üîê –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –ê–õ–ì–û–†–ò–¢–ú–´ –•–ï–®–ò–†–û–í–ê–ù–ò–Ø:")
    algorithms = ["md5", "sha1", "sha256", "sha512"]
    
    for algo in algorithms:
        response = requests.get(f"http://localhost:8000/api/bruteforce/demo-hash/demo?hash_type={algo}")
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ {algo.upper()}: {data['hash']}")
        else:
            print(f"   ‚ùå {algo.upper()}: –û—à–∏–±–∫–∞")
    
    # 2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API endpoints
    print("\n2. üåê REST API ENDPOINTS:")
    
    # –î–µ–º–æ —Ö–µ—à
    response = requests.get("http://localhost:8000/api/bruteforce/demo-hash/test")
    if response.status_code == 200:
        data = response.json()
        target_hash = data['hash']
        print(f"   ‚úÖ /demo-hash: {data['hash']}")
    else:
        print("   ‚ùå /demo-hash: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
    task_data = {
        "hash_type": "md5",
        "target_hash": target_hash,
        "max_length": 4
    }
    
    response = requests.post("http://localhost:8000/api/bruteforce/start", json=task_data)
    if response.status_code == 200:
        task_result = response.json()
        task_id = task_result['task_id']
        print(f"   ‚úÖ /start: –ó–∞–¥–∞—á–∞ {task_id[:8]}... –∑–∞–ø—É—â–µ–Ω–∞")
    else:
        print("   ‚ùå /start: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞")
        return
    
    # 3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    print("\n3. üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–î–ê–ß–ò:")
    
    for i in range(10):
        response = requests.get(f"http://localhost:8000/api/bruteforce/task/{task_id}")
        if response.status_code == 200:
            task = response.json()
            status = task['status']
            progress = task['progress']
            result = task.get('result', 'N/A')
            
            print(f"   üìà {i+1}. {status} ({progress}%) -> {result}")
            
            if status in ['COMPLETED', 'FAILED']:
                if status == 'COMPLETED':
                    print(f"   üéØ –ü–ê–†–û–õ–¨ –ù–ê–ô–î–ï–ù: '{result}'")
                break
        
        time.sleep(1)
    
    # 4. WebSocket –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n4. üîå WEBSOCKET –°–û–ï–î–ò–ù–ï–ù–ò–ï:")
    try:
        import websocket
        ws = websocket.create_connection(f"ws://localhost:8000/ws/{task_id}")
        ws.send("ping")
        response = ws.recv()
        ws.close()
        print(f"   ‚úÖ WebSocket –æ—Ç–≤–µ—Ç–∏–ª: {response}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è WebSocket: {str(e)[:50]}...")
    
    # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    print("\n5. üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:")
    
    # –í—Å–µ –∑–∞–¥–∞—á–∏
    response = requests.get("http://localhost:8000/api/bruteforce/tasks")
    if response.status_code == 200:
        tasks = response.json()
        total = len(tasks)
        completed = len([t for t in tasks if t['status'] == 'COMPLETED'])
        failed = len([t for t in tasks if t['status'] == 'FAILED'])
        pending = len([t for t in tasks if t['status'] == 'PENDING'])
        
        print(f"   üì¶ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total}")
        print(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        print(f"   ‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending}")
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    response = requests.get("http://localhost:8000/api/bruteforce/active-tasks")
    if response.status_code == 200:
        active = response.json()
        print(f"   ‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {active['count']}")
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    print("\n6. üìÅ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:")
    import os
    
    expected_dirs = [
        "app/api", "app/core", "app/db", "app/models", 
        "app/cruds", "app/schemas", "app/services", "app/websocket"
    ]
    
    for dir_path in expected_dirs:
        if os.path.exists(dir_path):
            print(f"   ‚úÖ {dir_path}/")
        else:
            print(f"   ‚ùå {dir_path}/ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # 7. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
    print("\n" + "=" * 50)
    print("üéâ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –õ–ê–ë–û–†–ê–¢–û–†–ù–û–ô –†–ê–ë–û–¢–´ ‚Ññ3:")
    print("=" * 50)
    print("‚úÖ REST API –∏–∑ –ª–∞–±.—Ä–∞–±–æ—Ç—ã ‚Ññ1 - –°–û–•–†–ê–ù–ï–ù")
    print("‚úÖ WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - –î–û–ë–ê–í–õ–ï–ù–ê") 
    print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ Celery) - –†–ï–ê–õ–ò–ó–û–í–ê–ù–´")
    print("‚úÖ TaskManager —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ - –†–ê–ë–û–¢–ê–ï–¢")
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite - –§–£–ù–ö–¶–ò–û–ù–ò–†–£–ï–¢")
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ - –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú")
    print("‚úÖ –ë—Ä—É—Ç—Ñ–æ—Ä—Å –∞–ª–≥–æ—Ä–∏—Ç–º - –ù–ê–•–û–î–ò–¢ –ü–ê–†–û–õ–ò")
    print("=" * 50)
    print("üèÜ –õ–ê–ë–û–†–ê–¢–û–†–ù–ê–Ø –†–ê–ë–û–¢–ê ‚Ññ3 –ü–û–õ–ù–û–°–¢–¨–Æ –í–´–ü–û–õ–ù–ï–ù–ê!")

if __name__ == "__main__":
    try:
        final_demo()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        print("üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python main.py") 