#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –†–ê–ë–û–¢–ê–Æ–©–ò–ô WebSocket —Ç–µ—Å—Ç —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
"""

import asyncio
import httpx
import json
import time

# –ò—Å–ø–æ–ª—å–∑—É–µ–º websocket-client (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –Ω–æ —Ä–∞–±–æ—á–∏–π)
try:
    import websocket
    print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º websocket-client")
except ImportError:
    print("‚ùå –ù—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: pip install websocket-client")
    exit(1)

def websocket_with_task_test():
    """–¢–µ—Å—Ç WebSocket —Å —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ–π"""
    
    print("üöÄ === –§–ò–ù–ê–õ–¨–ù–´–ô WebSocket –¢–ï–°–¢ ===")
    
    # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ API (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
    import requests
    
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ —Ö–µ—à–∞...")
    response = requests.get("http://localhost:8000/api/bruteforce/demo-hash/test")
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ö–µ—à–∞: {response.text}")
        return
    
    data = response.json()
    target_hash = data['hash']
    print(f"   –•–µ—à –¥–ª—è 'test': {target_hash}")
    
    print("2. –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏...")
    task_data = {
        "hash_type": "md5",
        "target_hash": target_hash,
        "max_length": 4  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–∂–Ω–∞—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    }
    
    response = requests.post("http://localhost:8000/api/bruteforce/start", json=task_data)
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {response.text}")
        return
    
    result = response.json()
    task_id = result['task_id']
    print(f"   ‚úÖ Task ID: {task_id}")
    
    # 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –î–û –∑–∞–ø—É—Å–∫–∞ –≤—Ç–æ—Ä–æ–π –∑–∞–¥–∞—á–∏
    print("3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...")
    
    ws_url = f"ws://localhost:8000/ws/{task_id}"
    print(f"   URL: {ws_url}")
    
    try:
        ws = websocket.create_connection(ws_url)
        print("   ‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
        time.sleep(0.5)
        ws.send("ping")
        print("   üì§ Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
        # –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        print("4. –û–∂–∏–¥–∞–Ω–∏–µ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        message_count = 0
        start_time = time.time()
        
        while time.time() - start_time < 30:  # 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
            try:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timeout –¥–ª—è recv
                ws.settimeout(2.0)
                message = ws.recv()
                message_count += 1
                
                print(f"   üì® {message_count}. {message}")
                
                # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
                try:
                    data = json.loads(message)
                    status = data.get('status', 'N/A')
                    
                    if status == 'STARTED':
                        print(f"       üöÄ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ê–ª–≥–æ—Ä–∏—Ç–º: {data.get('hash_type', 'N/A')}")
                    elif status == 'PROGRESS':
                        progress = data.get('progress', 0)
                        combination = data.get('current_combination', 'N/A')
                        speed = data.get('combinations_per_second', 0)
                        print(f"       ‚ö° –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%, –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {combination}, —Å–∫–æ—Ä–æ—Å—Ç—å: {speed}/—Å–µ–∫")
                    elif status == 'COMPLETED':
                        result = data.get('result', 'N/A')
                        elapsed = data.get('elapsed_time', 'N/A')
                        print(f"       üéØ –ó–ê–í–ï–†–®–ï–ù–û! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}, –≤—Ä–µ–º—è: {elapsed}")
                        break
                    elif status == 'FAILED':
                        error = data.get('result', 'N/A')
                        print(f"       ‚ùå –û–®–ò–ë–ö–ê: {error}")
                        break
                        
                except json.JSONDecodeError:
                    # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    pass
                
            except websocket.WebSocketTimeoutException:
                print("   ‚è≥ Timeout, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å...")
                continue
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                break
        
        ws.close()
        print("   üîå WebSocket –∑–∞–∫—Ä—ã—Ç")
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {time.time() - start_time:.1f} —Å–µ–∫")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
    
    # 3. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ API
    print("5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API...")
    response = requests.get(f"http://localhost:8000/api/bruteforce/task/{task_id}")
    if response.status_code == 200:
        task = response.json()
        print(f"   üìã –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {task['status']}")
        print(f"   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {task.get('result', 'N/A')}")
        print(f"   üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {task['progress']}%")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.text}")

if __name__ == "__main__":
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ requests –µ—Å—Ç—å
    try:
        import requests
    except ImportError:
        print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º requests...")
        import subprocess
        subprocess.run(["pip", "install", "requests"])
        import requests
    
    websocket_with_task_test()
    print("\nüéâ === –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===")
    print("‚úÖ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!") 