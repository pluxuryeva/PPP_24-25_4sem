#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ç–µ—Å—Ç WebSocket - —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –ø–æ—Ç–æ–º –∑–∞–¥–∞—á–∞!
"""

import asyncio
import websockets
import json
import httpx
import uuid

async def fixed_websocket_test():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç WebSocket"""
    
    print("=== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô WebSocket —Ç–µ—Å—Ç ===")
    
    # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º task_id –∑–∞—Ä–∞–Ω–µ–µ
    task_id = str(uuid.uuid4())
    print(f"1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω task_id: {task_id}")
    
    # 2. –°–ù–ê–ß–ê–õ–ê –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
    uri = f"ws://127.0.0.1:8000/ws/{task_id}"
    print(f"2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: {uri}")
    
    try:
        async with websockets.connect(uri) as websocket:
            print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω!")
            
            # 3. –¢–ï–ü–ï–†–¨ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å –Ω–∞—à–∏–º task_id
            async with httpx.AsyncClient() as client:
                print("3. –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Å –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º ID...")
                
                # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ —Ö–µ—à
                response = await client.get("http://localhost:8000/api/bruteforce/demo-hash/abc")
                data = response.json()
                target_hash = data['hash']
                print(f"   –•–µ—à –¥–ª—è 'abc': {target_hash}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å –Ω–∞—à–∏–º task_id (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –≤ API)
                task_data = {
                    "hash_type": "md5",
                    "target_hash": target_hash,
                    "max_length": 3,
                    "task_id": task_id  # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—à ID
                }
                
                response = await client.post("http://localhost:8000/api/bruteforce/start", json=task_data)
                if response.status_code == 200:
                    result = response.json()
                    print(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞: {result.get('task_id', task_id)}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {response.text}")
                    return
            
            # 4. –°–ª—É—à–∞–µ–º WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è
            print("4. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
            for i in range(30):  # 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
                try:
                    message = await asyncio.wait_for(websocket.recv(), timeout=2.0)
                    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ: {message}")
                    
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                    try:
                        data = json.loads(message)
                        status = data.get('status', 'N/A')
                        print(f"   üìã –°—Ç–∞—Ç—É—Å: {status}")
                        
                        if status == 'COMPLETED':
                            print(f"   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {data.get('result', 'N/A')}")
                            break
                        elif status == 'FAILED':
                            print(f"   ‚ùå –û—à–∏–±–∫–∞: {data.get('result', 'N/A')}")
                            break
                            
                    except json.JSONDecodeError:
                        # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                        pass
                        
                except asyncio.TimeoutError:
                    print(f"‚è≥ –¢–∞–π–º–∞—É—Ç {i+1}/30")
                    continue
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"–¢–∏–ø: {type(e)}")

if __name__ == "__main__":
    asyncio.run(fixed_websocket_test()) 