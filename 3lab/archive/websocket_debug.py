#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
"""

import asyncio
import websockets
import json
import httpx

async def debug_websocket():
    """–û—Ç–ª–∞–¥–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    
    print("=== –û—Ç–ª–∞–¥–∫–∞ WebSocket ===")
    
    # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    async with httpx.AsyncClient() as client:
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
        task_data = {
            "hash_type": "md5", 
            "target_hash": "0cc175b9c0f1b6a831c399e269772661",  # —Ö–µ—à –¥–ª—è "a"
            "max_length": 2
        }
        
        response = await client.post("http://localhost:8000/api/bruteforce/start", json=task_data)
        result = response.json()
        task_id = result['task_id']
        print(f"Task ID: {task_id}")
    
    # 2. –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket –±–µ–∑ timeout –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    uri = f"ws://127.0.0.1:8000/ws/{task_id}"
    print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {uri}")
    
    try:
        # –£–±–∏—Ä–∞–µ–º timeout –∏–∑ connect()
        async with websockets.connect(uri) as websocket:
            print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω!")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
            await websocket.send("ping")
            print("üì§ Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ recv
            for i in range(10):
                try:
                    message = await asyncio.wait_for(websocket.recv(), timeout=2.0)
                    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ: {message}")
                    
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
                    try:
                        data = json.loads(message)
                        print(f"   üìã –°—Ç–∞—Ç—É—Å: {data.get('status', 'N/A')}")
                        if data.get('status') in ['COMPLETED', 'FAILED']:
                            break
                    except json.JSONDecodeError:
                        pass  # –≠—Ç–æ –Ω–µ JSON —Å–æ–æ–±—â–µ–Ω–∏–µ
                        
                except asyncio.TimeoutError:
                    print(f"‚è≥ –¢–∞–π–º-–∞—É—Ç {i+1}")
                    continue
                    
    except websockets.exceptions.InvalidHandshake as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ handshake: {e}")
    except websockets.exceptions.ConnectionClosed as e:
        print(f"‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {e}")
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")

if __name__ == "__main__":
    asyncio.run(debug_websocket()) 