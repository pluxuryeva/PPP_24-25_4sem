#!/usr/bin/env python3
"""
–ë–´–°–¢–†–´–ô –¢–ï–°–¢ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã ‚Ññ3
"""

import requests
import time

def quick_test():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"""
    
    print("üöÄ === –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –õ–ê–ë–û–†–ê–¢–û–†–ù–û–ô –†–ê–ë–û–¢–´ ‚Ññ3 ===")
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º API
        print("1. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API...")
        response = requests.get("http://localhost:8000/api/bruteforce/demo-hash/a")
        if response.status_code == 200:
            print("   ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            target_hash = response.json()['hash']
        else:
            print("   ‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return
        
        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É
        print("2. ‚ö° –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏...")
        task_data = {
            "hash_type": "md5",
            "target_hash": target_hash,
            "max_length": 1  # –°—É–ø–µ—Ä –±—ã—Å—Ç—Ä–æ
        }
        
        response = requests.post("http://localhost:8000/api/bruteforce/start", json=task_data)
        if response.status_code == 200:
            task_id = response.json()['task_id']
            print(f"   ‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞: {task_id[:8]}...")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏")
            return
        
        # 3. –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥)
        print("3. ‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        for i in range(5):
            response = requests.get(f"http://localhost:8000/api/bruteforce/task/{task_id}")
            if response.status_code == 200:
                task = response.json()
                status = task['status']
                result = task.get('result', 'N/A')
                
                print(f"   {status} -> {result}")
                
                if status == 'COMPLETED':
                    print(f"   üéØ –ù–ê–ô–î–ï–ù–û: {result}")
                    break
                elif status == 'FAILED':
                    print(f"   ‚ùå –û–®–ò–ë–ö–ê: {result}")
                    break
            
            time.sleep(1)
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("4. üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket...")
        try:
            import websocket
            ws = websocket.create_connection(f"ws://localhost:8000/ws/test")
            ws.send("ping")
            ws.close()
            print("   ‚úÖ WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        except Exception as e:
            print(f"   ‚ö†Ô∏è WebSocket: {e}")
        
        # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("5. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...")
        response = requests.get("http://localhost:8000/api/bruteforce/tasks")
        if response.status_code == 200:
            tasks = response.json()
            completed = len([t for t in tasks if t['status'] == 'COMPLETED'])
            print(f"   ‚úÖ –í—Å–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {completed}")
        
        print("\nüéâ === –í–°–Å –†–ê–ë–û–¢–ê–ï–¢! ===")
        print("‚úÖ REST API: –†–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –ó–∞–¥–∞—á–∏: –í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç")
        print("‚úÖ WebSocket: –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    quick_test() 