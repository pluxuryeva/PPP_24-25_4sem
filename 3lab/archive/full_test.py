#!/usr/bin/env python3
"""
–ü–û–õ–ù–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –≤—Å–µ–≥–æ API
"""

import asyncio
import httpx
import time

async def full_api_test():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–≥–æ API"""
    
    print("üöÄ === –ü–û–õ–ù–´–ô –¢–ï–°–¢ –í–°–ï–ô –°–ò–°–¢–ï–ú–´ ===")
    
    async with httpx.AsyncClient() as client:
        
        # 1. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ —Ö–µ—à–µ–π –¥–ª—è –≤—Å–µ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
        print("\n1. üîê –¢–µ—Å—Ç –≤—Å–µ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è")
        algorithms = ["md5", "sha1", "sha256", "sha512"]
        
        for algo in algorithms:
            response = await client.get(f"http://localhost:8000/api/bruteforce/demo-hash/test?hash_type={algo}")
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ {algo.upper()}: {data['hash']}")
            else:
                print(f"   ‚ùå {algo.upper()}: {response.text}")
        
        # 2. –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        print("\n2. üè≠ –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á")
        
        tasks = []
        passwords = ["a", "b", "c"]
        
        for password in passwords:
            # –°–æ–∑–¥–∞–µ–º —Ö–µ—à
            response = await client.get(f"http://localhost:8000/api/bruteforce/demo-hash/{password}")
            if response.status_code == 200:
                data = response.json()
                target_hash = data['hash']
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä—É—Ç—Ñ–æ—Ä—Å
                task_data = {
                    "hash_type": "md5",
                    "target_hash": target_hash,
                    "max_length": 1  # –ö–æ—Ä–æ—Ç–∫–∏–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                }
                
                response = await client.post("http://localhost:8000/api/bruteforce/start", json=task_data)
                if response.status_code == 200:
                    result = response.json()
                    task_id = result['task_id']
                    tasks.append((password, task_id))
                    print(f"   ‚úÖ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è '{password}': {task_id[:8]}...")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è '{password}': {response.text}")
        
        # 3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        print("\n3. üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á")
        
        max_attempts = 30
        for attempt in range(max_attempts):
            print(f"\n   –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}:")
            
            completed_tasks = 0
            
            for password, task_id in tasks:
                response = await client.get(f"http://localhost:8000/api/bruteforce/task/{task_id}")
                if response.status_code == 200:
                    task = response.json()
                    status = task['status']
                    result = task.get('result', 'N/A')
                    progress = task['progress']
                    
                    print(f"     {password}: {status} ({progress}%) -> {result}")
                    
                    if status in ['COMPLETED', 'FAILED']:
                        completed_tasks += 1
                else:
                    print(f"     {password}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
            
            if completed_tasks == len(tasks):
                print("   üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
                break
                
            await asyncio.sleep(1)
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        print("\n4. üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á")
        response = await client.get("http://localhost:8000/api/bruteforce/tasks")
        if response.status_code == 200:
            all_tasks = response.json()
            print(f"   ‚úÖ –í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ —Å–∏—Å—Ç–µ–º–µ: {len(all_tasks)}")
            
            for task in all_tasks[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                print(f"     - {task['task_id'][:8]}... ({task['status']}) -> {task.get('result', 'N/A')}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.text}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        print("\n5. ‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
        response = await client.get("http://localhost:8000/api/bruteforce/active-tasks")
        if response.status_code == 200:
            active = response.json()
            print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {active['count']}")
            if active['active_tasks']:
                print(f"   üìù IDs: {[tid[:8] + '...' for tid in active['active_tasks']]}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {response.text}")
        
        # 6. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("\n6. üöÑ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        start_time = time.time()
        
        response = await client.get("http://localhost:8000/api/bruteforce/demo-hash/fast")
        data = response.json()
        target_hash = data['hash']
        
        task_data = {
            "hash_type": "md5",
            "target_hash": target_hash,
            "max_length": 4  # –ß—É—Ç—å —Å–ª–æ–∂–Ω–µ–µ
        }
        
        response = await client.post("http://localhost:8000/api/bruteforce/start", json=task_data)
        if response.status_code == 200:
            result = response.json()
            task_id = result['task_id']
            print(f"   ‚úÖ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {task_id[:8]}...")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            for i in range(60):  # 60 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
                response = await client.get(f"http://localhost:8000/api/bruteforce/task/{task_id}")
                if response.status_code == 200:
                    task = response.json()
                    if task['status'] in ['COMPLETED', 'FAILED']:
                        elapsed = time.time() - start_time
                        print(f"   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {task.get('result', 'N/A')}")
                        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.2f} —Å–µ–∫")
                        break
                await asyncio.sleep(0.5)
        
        # 7. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n7. üìà –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        response = await client.get("http://localhost:8000/api/bruteforce/tasks")
        if response.status_code == 200:
            all_tasks = response.json()
            
            completed = len([t for t in all_tasks if t['status'] == 'COMPLETED'])
            failed = len([t for t in all_tasks if t['status'] == 'FAILED'])
            pending = len([t for t in all_tasks if t['status'] == 'PENDING'])
            
            print(f"   üìä –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}")
            print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
            print(f"   ‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending}")
            print(f"   üì¶ –í—Å–µ–≥–æ: {len(all_tasks)}")
    
    print("\nüéâ === –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===")
    print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!")

if __name__ == "__main__":
    asyncio.run(full_api_test()) 