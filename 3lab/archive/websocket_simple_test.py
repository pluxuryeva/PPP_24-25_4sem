#!/usr/bin/env python3
"""
–ü–†–û–°–¢–û–ô WebSocket —Ç–µ—Å—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏
"""

import asyncio
import json
import sys
import time

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è proxy –ø—Ä–æ–±–ª–µ–º
try:
    import websocket
    print("–ò—Å–ø–æ–ª—å–∑—É–µ–º websocket-client")
    USE_SYNC = True
except ImportError:
    try:
        import websockets
        print("–ò—Å–ø–æ–ª—å–∑—É–µ–º websockets")
        USE_SYNC = False
    except ImportError:
        print("‚ùå –ù–µ—Ç WebSocket –±–∏–±–ª–∏–æ—Ç–µ–∫! –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        sys.exit(1)

import httpx

async def simple_websocket_test():
    """–ü—Ä–æ—Å—Ç–æ–π WebSocket —Ç–µ—Å—Ç"""
    
    print("üîå === –ü–†–û–°–¢–û–ô WebSocket –¢–ï–°–¢ ===")
    
    # 1. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ API
    async with httpx.AsyncClient() as client:
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ —Ö–µ—à–∞...")
        response = await client.get("http://localhost:8000/api/bruteforce/demo-hash/z")
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.text}")
            return
            
        data = response.json()
        target_hash = data['hash']
        print(f"   –•–µ—à –¥–ª—è 'z': {target_hash}")
        
        print("2. –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏...")
        task_data = {
            "hash_type": "md5",
            "target_hash": target_hash,
            "max_length": 1
        }
        
        response = await client.post("http://localhost:8000/api/bruteforce/start", json=task_data)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {response.text}")
            return
            
        result = response.json()
        task_id = result['task_id']
        print(f"   Task ID: {task_id}")
    
    # 2. –ü–æ–ø—Ä–æ–±—É–µ–º WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    print("3. –ü–æ–ø—ã—Ç–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫ websockets
    import urllib.request
    import urllib.error
    
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ WebSocket endpoint
        # –≠—Ç–æ –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏–π WebSocket, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º HTTP endpoint
        test_url = f"http://localhost:8000/ws/{task_id}"
        print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ URL: {test_url}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ WebSocket endpoint (–æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É)
        try:
            req = urllib.request.Request(test_url)
            response = urllib.request.urlopen(req)
            print(f"   –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö: {response.status}")
        except urllib.error.HTTPError as e:
            if e.code == 426:  # Upgrade Required - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è WebSocket
                print("   ‚úÖ WebSocket endpoint –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ (426 Upgrade Required)")
            else:
                print(f"   ‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞: {e.code}")
        except Exception as e:
            print(f"   üì° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ —ç—Ç–æ –Ω–µ HTTP: {e}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    # 3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ REST API
    print("4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ REST API...")
    
    async with httpx.AsyncClient() as client:
        for i in range(10):
            response = await client.get(f"http://localhost:8000/api/bruteforce/task/{task_id}")
            if response.status_code == 200:
                task = response.json()
                print(f"   {i+1}. {task['status']} ({task['progress']}%) -> {task.get('result', 'N/A')}")
                
                if task['status'] in ['COMPLETED', 'FAILED']:
                    break
            else:
                print(f"   {i+1}. –û—à–∏–±–∫–∞: {response.text}")
                
            await asyncio.sleep(0.5)

def sync_websocket_test():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π WebSocket —Ç–µ—Å—Ç —Å websocket-client"""
    print("üîå –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π WebSocket —Ç–µ—Å—Ç...")
    
    try:
        import websocket
        
        # –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        ws_url = "ws://localhost:8000/ws/test-connection"
        print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {ws_url}")
        
        ws = websocket.create_connection(ws_url)
        print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
        ws.send("ping")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
        try:
            result = ws.recv()
            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ: {result}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç: {e}")
        
        ws.close()
        print("üîå WebSocket –∑–∞–∫—Ä—ã—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ WebSocket: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ WebSocket...")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
    asyncio.run(simple_websocket_test())
    
    # –ü–æ—Ç–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    sync_websocket_test() 