#!/usr/bin/env python3
"""
–ë–´–°–¢–†–´–ô –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã ‚Ññ3
"""

import requests
import subprocess
import time
import json

def test_api():
    """–¢–µ—Å—Ç REST API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ REST API...")
    
    try:
        # 1. –î–µ–º–æ —Ö–µ—à
        response = requests.get("http://localhost:8000/api/bruteforce/demo-hash/test", timeout=5)
        assert response.status_code == 200
        data = response.json()
        target_hash = data['hash']
        print(f"   ‚úÖ Demo hash: {target_hash}")
        
        # 2. –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
        task_data = {
            "hash_type": "md5",
            "target_hash": target_hash,
            "max_length": 4
        }
        response = requests.post("http://localhost:8000/api/bruteforce/start", json=task_data, timeout=5)
        assert response.status_code == 200
        task_id = response.json()['task_id']
        print(f"   ‚úÖ Task started: {task_id[:8]}...")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        response = requests.get(f"http://localhost:8000/api/bruteforce/task/{task_id}", timeout=5)
        assert response.status_code == 200
        print(f"   ‚úÖ Task status: {response.json()['status']}")
        
        # 4. –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        response = requests.get("http://localhost:8000/api/bruteforce/tasks", timeout=5)
        assert response.status_code == 200
        tasks_count = len(response.json())
        print(f"   ‚úÖ Total tasks: {tasks_count}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå API Error: {e}")
        return False

def test_websocket():
    """–¢–µ—Å—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket...")
    
    try:
        import websocket
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        ws = websocket.create_connection("ws://localhost:8000/ws/test-connection", timeout=5)
        ws.send("ping")
        response = ws.recv()
        ws.close()
        
        print(f"   ‚úÖ WebSocket response: {response[:30]}...")
        return True
        
    except Exception as e:
        print(f"   ‚ùå WebSocket Error: {str(e)[:50]}...")
        return False

def test_algorithms():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤...")
    
    algorithms = ["md5", "sha1", "sha256", "sha512"]
    success = 0
    
    for algo in algorithms:
        try:
            response = requests.get(f"http://localhost:8000/api/bruteforce/demo-hash/demo?hash_type={algo}", timeout=5)
            if response.status_code == 200:
                hash_value = response.json()['hash']
                print(f"   ‚úÖ {algo.upper()}: {hash_value[:16]}...")
                success += 1
            else:
                print(f"   ‚ùå {algo.upper()}: Failed")
        except Exception as e:
            print(f"   ‚ùå {algo.upper()}: {e}")
    
    return success == len(algorithms)

def test_parallel_tasks():
    """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á"""
    print("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á
        tasks = []
        passwords = ["a", "b", "c"]
        
        for password in passwords:
            # –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à
            response = requests.get(f"http://localhost:8000/api/bruteforce/demo-hash/{password}", timeout=5)
            target_hash = response.json()['hash']
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
            task_data = {
                "hash_type": "md5",
                "target_hash": target_hash,
                "max_length": 1
            }
            response = requests.post("http://localhost:8000/api/bruteforce/start", json=task_data, timeout=5)
            task_id = response.json()['task_id']
            tasks.append((password, task_id))
            print(f"   üì§ Task '{password}': {task_id[:8]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        response = requests.get("http://localhost:8000/api/bruteforce/active-tasks", timeout=5)
        active_count = response.json()['count']
        print(f"   ‚ö° Active tasks: {active_count}")
        
        return len(tasks) > 0
        
    except Exception as e:
        print(f"   ‚ùå Parallel tasks error: {e}")
        return False

def test_performance():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üöÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        response = requests.get("http://localhost:8000/api/bruteforce/demo-hash/ab", timeout=5)
        target_hash = response.json()['hash']
        
        task_data = {
            "hash_type": "md5",
            "target_hash": target_hash,
            "max_length": 2
        }
        
        response = requests.post("http://localhost:8000/api/bruteforce/start", json=task_data, timeout=5)
        task_id = response.json()['task_id']
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥)
        for i in range(30):
            response = requests.get(f"http://localhost:8000/api/bruteforce/task/{task_id}", timeout=5)
            task = response.json()
            
            if task['status'] == 'COMPLETED':
                elapsed = time.time() - start_time
                print(f"   ‚úÖ Found '{task['result']}' in {elapsed:.2f} seconds")
                return True
            elif task['status'] == 'FAILED':
                print(f"   ‚ùå Task failed: {task.get('result', 'Unknown error')}")
                return False
            
            time.sleep(1)
        
        print("   ‚è±Ô∏è Task timeout (30s)")
        return False
        
    except Exception as e:
        print(f"   ‚ùå Performance test error: {e}")
        return False

def check_server():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"""
    try:
        response = requests.get("http://localhost:8000/docs", timeout=5)
        return response.status_code == 200
    except:
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–ê–ë–û–†–ê–¢–û–†–ù–û–ô –†–ê–ë–û–¢–´ ‚Ññ3 ===")
    print("üìã –í–∞—Ä–∏–∞–Ω—Ç 5: –ë—Ä—É—Ç—Ñ–æ—Ä—Å —Å WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    if not check_server():
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
        return
    
    print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("REST API", test_api),
        ("WebSocket", test_websocket),
        ("–ê–ª–≥–æ—Ä–∏—Ç–º—ã", test_algorithms),
        ("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏", test_parallel_tasks),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", test_performance),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{test_name}:")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"   ‚ùå Critical error: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\nüìà –ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{len(results)}")
    
    if passed == len(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üèÜ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–¥–∞—á–µ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import requests
        import websocket
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install requests websocket-client")
        exit(1)
    
    main() 